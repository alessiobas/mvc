Kmom06
-----------

#### Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?

Jag tyckte phpmetrics var ett trevlig verktyg att använda. Det var lätt att förstå sig på och rapporten som togs ut hade ett trevligt gränssnitt som var lättnavigerat. Jag gillade förstasidan som gav en summering av ett urplock av mätvärden. Phpmetrics gav, till skillnad från Scrutinizer, ett mycket bättre urval av modulerna som analyserades. Att få en god överblick i Maintainabilty/complexity bilden på förstasidan där verktyget jobbar med cirklar i olika storlekar och färger för att ge en fin överblick över controllers och modeller gav mycket tycker jag. Utifrån den bilden kunde jag få en god uppfattning om vilka moduler jag borde analysera djupare enligt några av de viktigaste/mest centrala mätvärdena. Om jag vidare var intresserad av att dyka djupare i andra mätvärden kunde jag lätt navigera mig genom den vänstra sidomenyn med tydliga titlar för sidorna. Något jag saknade var att antigen direkt få mer info om parametrarna som analyserats på sidan eller i alla fall få en länk som kunde fungerat som ett "uppslagsverk" där jag skulle kunna få mer info om parametrarna som mäts i rapporten. Jag blev lite förvirrad över vad värdena faktiskt indikerade i vissa fall.

#### Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?

Integrationen av Scrutinizer gick väldigt smidigt. Badgesen gav en snabb indikation på hur koden i sin helhet håller kvalitetsmässigt. Dock analyserades stora delar av modulerna där jag förstår det som vissa delar följer med när jag jobbar med Symfony etc. Alltså delar som jag själv inte skrivit eller använt, utan som finns med för att jag jobbar i ramverket jag jobbar i. Det ger alltså badgesen ett lite missvisande resultat vilket jag behövde ta i beaktning. Jag har en kodtäckning på 20% vid första bygget och en kodkvalitet på 6,14, vilket Scrutinizer ansåg var "Satisfactory", trots ungefär 1/4 av röd (F) kod. Vid närmare analys såg jag att de underkända delarna kom från andra delar än jag själv skrivit i koden. Därför bortsåg jag lite från dessa vid denna uppgift, även om jag reflekterade över vad det innebär att jag överser dessa delar. Vid en implementation av ett annat program "ute i riktiga världen" skulle jag definitivt tagit dessa moduler i beaktning i större utsträckning än jag gjorde i denna uppgift för detta program. Generellt tyckte jag Scrutinizer var svåranvänt generellt, men den mest positiva delen var kopplingen till Github, som var enkel samt kodtäckningens gränssnitt. Jag gillade även hur Issues lyftes med Best Practice tips som jag kunde dyka djupare in i. 

#### Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?

Jag tycker kodkvalitet dels kan analyseras utifrån verktyg som vi använt i detta kmom. Dock är en stor del enligt mig, hur "lättläst" koden är, hur testbar den är och hur lång tid det tar att köra koden. Att hitta en balans i dessa delar känns viktigt, där jag t.ex. kanske behöver dela upp viss kod på flera rader, vilket över vissa mätvärden i rapporterna och kan tolkas som negativt, men jag har kanske lyckats göra koden mer lättläst genom att dela upp vissa stycken på fler rader, vilket kan vara positivt, samtidigt som det egentligen inte tar märkvärt mycket mer tid att köra koden. Badges kan vara ett stöd för att analysera kodkvaliteten, men jag tycker inte man ska stirra sig blind på dessa värden. Det ligger mer till grund för god och bra kodkvalitet, vilket känns viktigt att förstå.

#### Vilken är din TIL för detta kmom?

Analyser av kodkvalitet utifrån centrala parametrar som påvisar hur jag kan öka kvaliteten på koden. Även vad parametrarna faktiskt betyder och vilka mätvärden jag kan analysera djupare för att nå högra kodkvalitet.